
---
--- public method 
---


---
--- INTERNAL Data 
---
local max_lives = 3


---
--- INTERNAL LOGIC 
---
local function update_ui_score(self)
	msg.post("ui#in_game_gui", "set_score", { score = self.score })
end

local function update_game_over_score(self)
	msg.post("ui#game_over_gui", "set_score", { score = self.score })
end

local function update_ui_lives(self)
	msg.post("ui#in_game_gui", "set_lives", { lives = self.lives } )
end


---
--- INTERNAL LOGIC (handle message)
---

local function show_title_ui(self) 
	msg.post("ui#game_over_gui", "disable")
	msg.post("ui#in_game_gui", "disable")
	msg.post("ui#title_gui", "enable")	
end

local function show_game_ui(self) 
	msg.post("ui#game_over_gui", "disable")
	msg.post("ui#in_game_gui", "enable")
	msg.post("ui#title_gui", "disable")	
end

local function show_game_over_ui(self) 

	update_game_over_score(self)
	
	msg.post("ui#game_over_gui", "enable")
	msg.post("ui#in_game_gui", "disable")
	msg.post("ui#title_gui", "disable")	
end

-- Logic : 
-- 	Reset Life 
-- 	Show Main Game UI 
-- 	Show player 
-- 	Start the stage spawner 
--  Update life value 
local function new_game(self) 	
	print("*** new_game")

	self.lives = max_lives
	self.score = 0
	self.level = 1
	
	update_ui_score(self);
	update_ui_lives(self);

	msg.post("ship", "show")

	msg.post("factory", "spawn_enemy", {level = self.level})
	
	show_game_ui(self)
end

-- Logic : 
-- 	Show the Game Over UI 
-- 
local function game_over(self) 
	print("Show game over")
	show_game_over_ui(self)
end

-- Logic : 
-- 	Update life Count 
-- 	if life = 0 go to game_over logic 
-- 	if life > 0 go to spawn_player logic 
local function player_die(self) 
	self.lives = self.lives - 1
	update_ui_lives(self)

	if(self.lives > 0) then
		msg.post("ship", "show")
		return 
	end

	game_over(self)
end



local function update_enemy_count(self, new_count) 
	self.enemy_count = new_count

	-- print("DEBUG: update_enemy_count. count=", self.enemy_count)
end

-- LOGIC 
-- 	Handle
local function increase_score(self, add_score)
	self.score = self.score + add_score;
	update_ui_score(self);
end 

local function spawn_new_level(self)
	self.level = self.level + 1

	msg.post("factory", "spawn_enemy", {level = self.level})
	
end

local function handle_enemy_die(self, enemy_score)
	print("DEBUG: handle_enemy_die. enemy_score=", enemy_score)
	
	self.enemy_count = self.enemy_count - 1

	increase_score(self, enemy_score)
		
	if(self.enemy_count > 0) then
		return;		-- No need to process anything 
	end

	spawn_new_level(self)
end

local function play_again(self) 	
end

local function game_pause(self)
end

local function game_resume(self)
end

local function next_level(self)
end	



function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	self.enemy_count = 0
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	print("game_manager: on_message. msg=" .. message_id)

	if message_id == hash("start_game") then
		new_game(self)
	elseif message_id == hash("update_enemy_count") then
		update_enemy_count(self, message.enemy_count)
	elseif message_id == hash("enemy_die") then
		handle_enemy_die(self, message.score)
	elseif message_id == hash("player_die") then
		player_die(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end






	