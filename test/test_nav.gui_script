local function create_test_button(self, button_name, template_node, node_pos) 
	local new_node = gui.clone(template_node)

	-- set the node id so we can find and delete them later
	local caption = string.gsub(button_name, "_", " ")
	
	gui.set_id(new_node, button_name)
	gui.set_position(new_node, node_pos)
	gui.set_text(new_node, caption)
end


local function handle_test_button(self, action)
	if(action.pressed == false) then
		return false 
	end

	for key, value in ipairs(self.test_list) 
	do
		local button = gui.get_node(value)
		
		if gui.pick_node(button, action.x, action.y)  then 
			-- print("DEBUG: testing: " .. value .. " target=" .. self.target)

			if self.target ~= "" and self.target ~= hash("") then 
				print("simple_tdd: post message=", value, " target=", self.target)
				msg.post(self.target, value)
				-- msg.post("go", value)
			end 
			
			return true
		end 
	end

	return false 
end

local function create_test_button_list(self, _test_list)
	self.test_list = {}; 

	-- setup the local test list 
	if(_test_list ~= nil) then 
		for key, value in ipairs(_test_list) 
		do
			table.insert(self.test_list, value)
		end 
	end 

	
	-- data for create button 
	local template = gui.get_node("button_template")
	local node_pos = vmath.vector3(50, 0, 0)
	
	-- 
	print("DEBUG: table size=" .. table.maxn(self.test_list))
	if(table.maxn(self.test_list) <= 0) then 
		create_test_button(self, "No Test Yet", template, node_pos)
		return
	end

	-- 

	
	for key,value in ipairs(self.test_list) 
	do
		-- print("DEBUG: value=" .. value)
		create_test_button(self, value, template, node_pos)
		node_pos.x = node_pos.x + 100
	end
	
end 

function init(self)
	msg.post(".", "acquire_input_focus")

	self.target = "";
	
	self.is_dragging = false
	

	local test_list = {
		"test_hello",
		"test_hello1",
		"test_hello2",
		"test_hello3",
	}

	-- create_test_button_list(self, test_list)
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setup") then 
		-- pprint("DEBUG: message=", message);
		self.target = message.target
		create_test_button_list(self, message.test_list)
	end 
end

function handle_drag_panel(self, panel, move_delta) 
	if(self.is_dragging == false) then
		return
	end
-- 
-- 	self.is_dragging = true
-- 	print("move_delta=", move_delta, " self.x=", self.x, " x=", x)
-- 	local move_delta = x - self.x
-- 	self.x = x
-- 
-- 	
-- 	

	-- print("move_delta=", move_delta)
	local pos = gui.get_position(panel)
	pos.x = pos.x + move_delta
	if(pos.x > 0) then 
		pos.x = 0
	end
	gui.set_position(panel, pos)
end

function handle_release_panel(self)
	self.is_dragging = false
end



function on_input(self, action_id, action)
	-- print("On input: action_id=", action_id, " action_id=", action_id, " pressed=", action.pressed, " release=", action.released)
	-- pprint("Action=", action)
	-- pprint("action_id=", action_id, " Action=", action)
	
	if action_id == hash("touch")  then 
		-- print("Start dragging: x=", action.x)

		if handle_test_button(self, action) then 
			return true
		end  

		
		local panel = gui.get_node("test_panel")
		if action.pressed and gui.pick_node(panel, action.x, action.y) then 
			print "Start Dragging"
			self.is_dragging = true	
			return false
		elseif action.pressed and gui.pick_node(panel, action.x, action.y) == false then 
			pprint("action_id=", action_id, " Action=", action)
		else 			
			handle_drag_panel(self, panel, action.screen_dx)
		end

		if action.pressed and gui.pick_node(panel, action.x, action.y) == false then 
			pprint("action_id=", action_id, " Action=", action)
		end
	elseif action.released == true then 
		print("Release dragging")
		handle_release_panel(self)
	end
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
